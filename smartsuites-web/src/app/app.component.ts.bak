import {AfterViewInit, Component, OnInit, ViewChild, ViewContainerRef} from '@angular/core';
import {GlobalService} from "./service/global/global.service";
import {ArrayOrderingService} from "./service/array-ordering/array-ordering.service";
import {EventService} from "./service/event/event.service";
import {BaseUrlService} from "./service/base-url/base-url.service";
import {LoginService} from "./service/login/login.service";
import {WebsocketEventService} from "./service/websocket/websocket-event.service";
import {NzModalService, NzNotificationService} from "ng-zorro-antd";
import {Ticket} from "./model/Ticket";
import {WebsocketMessageService} from "./service/websocket/websocket-message.service";
import {SearchService} from "./service/search/search.service";
import {HttpClient} from "@angular/common/http";
import {NoteListService} from "./service/note-list/note-list.service";
import {Router} from "@angular/router";

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent implements OnInit{

  looknfeel = 'default'

  //用户的Token
  ticket:Ticket

  connected

  showPlatform = false

  showPlatformModel(){
    this.showPlatform = true
  }

  handleOk = (e) => {
    this.showPlatform = false;
  }

  handleCancel = (e) => {
    this.showPlatform = false;
  }

  constructor(private globalService:GlobalService,
              /*private arrayOrderingSrv:ArrayOrderingService,*/
              private websocketMsgSrv:WebsocketMessageService,
              private searchForm:SearchService,
              private eventService:EventService,
              private baseUrlService:BaseUrlService,
              private loginService:LoginService,
              private httpClient:HttpClient,
              private router:Router,
              private websocketEventService:WebsocketEventService,
              private alertService:NzNotificationService,
              private noteListFactory:NoteListService
              ) {
    let self = this;
    this.ticket = globalService.ticket

  }

  ngOnInit(): void {

    let self = this;

    this.getZeppelinVersion()

    // 监听Websocket的连接状态
    this.eventService.subscribe('setConnectedStatus', function (msg) {
      self.connected = msg
    })

    /*this.eventService.subscribe('loginSuccess', function (event, param) {
      this.globalService.ticket.screenUsername = this.globalService.ticket.principal
      this.listConfigurations()
      this.loadNotes()
      this.getHomeNote()
    })*/

    this.loginService.login()

    this.eventService.subscribe('setIframe', function (event, data) {
      if (!event.defaultPrevented) {
        this.asIframe = data
        event.preventDefault()
      }
    })

    this.eventService.subscribe('setLookAndFeel', function (event, data) {
      if (!event.defaultPrevented && data && data !== '' && data !== this.looknfeel) {
        this.looknfeel = data
        event.preventDefault()
      }
    })

    // Set The lookAndFeel to default on every page
    this.eventService.subscribe('$routeChangeStart', function (event, next, current) {
      this.eventService.broadcast('setLookAndFeel', 'default')
    })

    /*BootstrapDialog.defaultOptions.onshown = function () {
      angular.element('#' + this.id).find('.btn:last').focus()
    }

    // Remove BootstrapDialog animation
    BootstrapDialog.configDefaultOptions({animate: false})*/

  }

  isLogin():boolean{
    return this.loginService.isLogin()
  }

  noteName(note) {
    /*if (!_.isEmpty(note)) {
      return this.arrayOrderingSrv.getNoteName(note)
    }*/
  }

  // 获取版本号
  getZeppelinVersion () {
    this.httpClient.get(this.baseUrlService.getRestApiBase() + '/version')
      .subscribe(
        response => {
          this.globalService.zeppelinVersion = response['body']
        },
        errorResponse => {
          console.log('Error %o %o', status, errorResponse.message)
        }
      );
  }

}
